{"version":3,"sources":["logo.svg","components/algorithm/AlgorithmPanel.js","components/chart/actions.js","components/chart/Barchart.js","App.js","serviceWorker.js","components/algorithm/reducers.js","components/algorithm/sortingcode/bubblesort.js","components/algorithm/sortingcode/sortedcheck.js","components/algorithm/sortingcode/selectionsort.js","components/algorithm/sortingcode/insertionsort.js","components/chart/reducers.js","store.js","components/algorithm/actions.js","index.js"],"names":["module","exports","connect","state","chartState","chartChange","length","dispatch","onArrayCreated","algo","anArray","type","payload","createArray","onButtonClicked","newArray","useState","setAlgo","arraynum","setArrayNum","onGoing","setOnGoing","useEffect","i","newElement","Math","floor","random","push","handleSubmit","e","preventDefault","className","onSubmit","disabled","onChange","target","value","min","max","parseInt","onClick","chartData","onChartChangeAuto","upperLimit","Yarray","setYArray","delay","testing","setTimeout","sorted","console","log","width","svg","d3","selectAll","remove","x","domain","range","xAxis","ticks","chartGroup","append","attr","data","enter","d","call","clearTimeout","id","height","App","Boolean","window","location","hostname","match","initialState","text","bubblesort","item","cursorPointer","temp","sortedCheck","len","j","selectionsort","lowest","lowest_index","truncated","slice","splice","insertionsort","splitted","border","buffer","unshift","undefined","cursor","round","reducers","action","chartMovement","concat","method","ref","tobesorted","swapped","cursor_pointer","round_counter","OnGoing","Ongoing","sortUpdate","createARun","aNewRun","rootReducer","combineReducers","ReactDOM","render","StrictMode","store","createStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,6KC4E5BC,G,MAAAA,aAXS,SAAAC,GAAK,MAAK,CAC9BC,WAAWD,EAAME,YAAYF,EAAME,YAAYC,OAAS,OAGjC,SAAAC,GACvB,MAAM,CACFC,eAAe,SAACC,EAAKC,GAAN,OAAgBH,ECpEZ,SAACE,EAAKC,GAAN,MAAiB,CACxCC,KAFwB,eAGxBC,QAAQ,CAACH,OAAKC,YDkE8BG,CAAYJ,EAAKC,KACzDI,gBAAgB,kBAAIP,EC/DI,CAC5BI,KAFwB,qBDoEbT,EAvEQ,SAAC,GAAsC,IAArCM,EAAoC,EAApCA,eAAeM,EAAqB,EAArBA,gBAEhCC,EAAW,GAF0C,EAInCC,mBAAS,UAJ0B,mBAIlDP,EAJkD,KAI7CQ,EAJ6C,OAK5BD,mBAAS,KALmB,mBAKlDE,EALkD,KAKzCC,EALyC,OAM9BH,mBAAS,GANqB,mBAMlDI,EANkD,KAM1CC,EAN0C,KAQzDC,qBAAU,WACN,IAAI,IAAIC,EAAE,EAAEA,EAAEL,EAASK,IAAI,CACvB,IAAIC,EAAaC,KAAKC,MAAoB,IAAdD,KAAKE,UACjCZ,EAASa,KAAKJ,GAGfT,EAAST,OAAO,GACfE,EAAeC,EAAKM,KAG1B,CAACG,EAAST,IAEZ,IASMoB,EAAc,SAACC,GACjBA,EAAEC,iBACFV,EAAW,GACXP,KAQJ,OACI,yBAAKkB,UAAU,gBACX,0BAAMC,SAAUJ,GACZ,4DACA,4BAAQK,SAAoB,IAAVd,EAAae,SAxBtB,SAACL,GAClBb,EAAQa,EAAEM,OAAOC,SAwBL,4BAAQA,MAAM,UAAd,eACA,4BAAQA,MAAM,aAAd,kBACA,4BAAQA,MAAM,UAAd,mBAGJ,oDAA0BnB,GAC1B,2BAAOP,KAAK,QAAOqB,UAAU,SAAQM,IAAI,IAAIC,IAAI,MAAKF,MAAOnB,EAASiB,SA3BlE,SAACL,GACbT,EAAW,GACXF,EAAYqB,SAASV,EAAEM,OAAOC,WA0BtB,2BAAOH,SAAoB,IAAVd,EAAYT,KAAK,SAAQqB,UAAU,YAAWK,MAAM,MAAKI,QAASZ,U,gBE2BpF3B,eAZS,SAAAC,GAAK,MAAK,CAC9BuC,UAAUvC,EAAME,YAAYF,EAAME,YAAYC,OAAS,OAGhC,SAAAC,GACvB,MAAM,CACFoC,kBAAkB,kBAAIpC,EDrEE,CAC5BI,KAFwB,qBC4EbT,EA9EE,SAAC,GAAmC,IAAlCwC,EAAiC,EAAjCA,UAAUC,EAAuB,EAAvBA,kBACrB5B,EAAW,GAEX6B,EAAaF,EAAUhC,QAAQJ,OAHa,EAKvBU,mBAAS0B,EAAUhC,SALI,mBAKzCmC,EALyC,KAKlCC,EALkC,KA0DhD,OAnDAxB,qBAAU,WACN,IAAIyB,EAAQ,GAEQ,WAAjBL,EAAUjC,OACTsC,EAAQ,IAGZ,IAAMC,EAAUC,YAAW,WAe3B,GAd6B,IAA1BP,EAAUQ,OAAO5C,QAChBS,EAAW2B,EAAUhC,QACrBoC,EAAU/B,IAEN2B,EAAUhC,UAAUgC,EAAUQ,SAElCC,QAAQC,IAAI,0BAEZrC,EAAW2B,EAAUhC,QACrBoC,EAAU/B,GACV4B,KAIiB,IAAlB5B,EAAST,OAAW,CACnB,IAAM+C,EAAQ,IAAItC,EAAST,OAErBgD,EAAMC,IAAU,eACtBD,EAAIE,UAAU,KAAKC,SAEnB,IAAIC,EAAIH,MAAiBI,OAAO,CAAC,EAAEf,IAAagB,MAAM,CAAC,EAAEP,IAGrDQ,EAAQN,IAAcG,GAAGI,MAAM,GAI/BC,EAAaT,EAAIU,OAAO,KAAKC,KAAK,YAAY,cAAc,IAAMZ,EAAM,GAAG,SAC/EU,EAAWP,UAAU,QAAQU,KAAKrB,GAAQsB,QAAQH,OAAO,QAChDC,KAAK,UAAS,SAACG,EAAE7C,GAAH,OAAS,EAAF6C,KACrBH,KAAK,QAAQ,OACbA,KAAK,OAAO,QACZA,KAAK,KAAI,SAACG,EAAE7C,GAAH,OAAO,IAAIA,KACpB0C,KAAK,KAAI,SAACG,EAAE7C,GAAH,OAjBH,GAiBmB,EAAF6C,KAEhCL,EAAWC,OAAO,KAAKC,KAAK,QAAQ,UAC3BA,KAAK,YAAY,mBACjBI,KAAKR,MAEhBd,GACF,OAAO,kBAAIuB,aAAatB,MAC1B,CAACN,EAAUG,IAGT,yBAAK0B,GAAG,mBACJ,yCACA,yBAAKvC,UAAU,aAAaqB,MAAM,SAASmB,OAAO,cCnD/CC,MAVf,WACE,OACE,yBAAKzC,UAAU,OACb,kDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CAAC,CAACC,KAAK,SAAStE,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KCDjD,SAASuE,EAAWC,EAAKC,GAC5BhC,QAAQC,IAAI,qBAAsB+B,GAE9B,IAAIC,EAAOF,EAAKC,GAMpB,OALOD,EAAKC,GAAeD,EAAKC,EAAc,KACtCD,EAAKC,GAAeD,EAAKC,EAAc,GACvCD,EAAKC,EAAc,GAAGC,GAGvBF,ECVJ,SAASG,EAAYH,GAExB,IADA,IAAII,EAAMJ,EAAK5E,OACPiF,EAAE,EAAEA,EAAED,EAAIC,IACd,GAAGL,EAAKK,GAAGL,EAAKK,EAAE,GAGd,OAAO,EAGf,OAAO,E,WCTJ,SAASC,EAAcN,EAAKC,GAC/BhC,QAAQC,IAAI,qBAAsB+B,GAOlC,IALA,IAAIM,EAAS,IACTC,EAAe,EACfC,EAAYT,EAAKU,MAAMT,GACvBjC,EAASgC,EAAKU,MAAM,EAAET,GAElB5D,EAAE,EAAEA,EAAEoE,EAAUrF,OAAOiB,IACxBoE,EAAUpE,IAAIkE,IACbA,EAASE,EAAUpE,GACnBmE,EAAenE,GASvB,OALA2B,EAAOtB,KAAK6D,GACZE,EAAUE,OAAOH,EAAa,GAC9BxC,EAAOtB,KAAP,MAAAsB,EAAM,YAASyC,IACfT,EAAOhC,EClBJ,SAAS4C,EAAcZ,EAAKC,GAC/BhC,QAAQC,IAAI,uCAEZ,IAAIF,EAASgC,EAAKU,MAAM,EAAET,GACtBQ,EAAYT,EAAKU,MAAMT,GAK3B,GAAmB,IAAhBjC,EAAO5C,OACN4C,EAAOtB,KAAK+D,EAAU,IACtBA,EAAUE,OAAO,EAAE,OAIlB,CAED,IADA,IAAIE,EAAWJ,EAAU,GACjBpE,EAAE,EAAEA,EAAE2B,EAAO5C,OAAOiB,IAAI,CAC5B,GAAGwE,GAAU7C,EAAO3B,IAAIwE,EAAS7C,EAAO3B,EAAE,GAAG,CACzC,IAAIyE,EAASzE,EAAI,EAEb0E,EAAS/C,EAAO0C,MAAMI,GAI1B9C,EAAO2C,OAAOG,GAId9C,EAAO3B,EAAE,GAAGwE,EAGZ7C,EAAOtB,KAAP,MAAAsB,EAAM,YAAS+C,IACf,MAEE,GAAGF,EAAS7C,EAAO,GAAG,CACxBA,EAAOgD,QAAQH,GACf,MACE,GAAGA,GAAU7C,EAAO3B,SAAkB4E,IAAdjD,EAAO3B,EAAE,GAAe,CAClD2B,EAAOtB,KAAKmE,GACZ,OAGRJ,EAAUE,OAAO,EAAE,GAQvB,OAHA3C,EAAOtB,KAAP,MAAAsB,EAAM,YAASyC,IACfT,EAAOhC,EC1CX,IAAM6B,EAAe,CAAC,CAACtE,KAAK,GAAGC,QAAQ,GAAGwC,OAAO,GAAGkD,OAAO,EAAEC,MAAM,EAAEjF,QAAQ,ICDvEkF,EAAW,CAEbjG,YDCuB,WAAgC,IAA/BF,EAA8B,uDAAxB4E,EAAawB,EAAW,uCAC/C5F,EAAgB4F,EAAhB5F,KAAKC,EAAW2F,EAAX3F,QACZ,OAAOD,GACH,ITVoB,eSUD,IACTF,EAAgBG,EAAhBH,KAAKC,EAAWE,EAAXF,QAEN8F,EAAgB,CACjB/F,OACAC,QAAQA,EACRwC,OAAO,GACPkD,OAAOjG,EAAM,GAAGiG,OAChBC,MAAMlG,EAAM,GAAGkG,MACfjF,QAAQjB,EAAM,GAAGiB,SAOtB,OAJA+B,QAAQC,IAAI,2BAILjD,EAAMsG,OAAOD,GAGvB,ITvBoB,eS0BhB,IAAIlB,EAAMnF,EAAMG,OAEZoG,GADUvG,EAAMiB,QACPjB,EAAMmF,EAAI,GAAG7E,MACtBkG,EAAMxG,EAAMmF,EAAI,GAAG5E,QACnBkG,EAAazG,EAAMmF,EAAI,GAAG5E,QAAQkF,QAClCiB,EAAU,GACV3D,GAAS,EAGT4D,EAAiB3G,EAAMmF,EAAI,GAAGc,OAAOW,EAAe5G,EAAMmF,EAAI,GAAGe,MAErE,GAAY,WAATK,EAAkB,CACjB,GAAuB,IAApBE,EAAWtG,OACVuG,EAAU5B,EAAW2B,EAAWE,QAC9B,GAAuB,IAApBF,EAAWtG,OAGhB,IAAY,KAFZ4C,EAASmC,EAAYuB,IAGjBC,EAAU5B,EAAW2B,EAAWE,GAChC3G,EAAM6G,QAAU,OACd,IAAY,IAAT9D,EAEL,OADA/C,EAAM8G,QAAU,EACT9G,GAGf2G,GAA8B,GAEZH,EAAIrG,OAAO,EAAEyG,IAC3BD,EAAkB,EAClBC,GAAgC,GAIpC,IAAMG,EAAa,CACfzG,KAAKiG,EACLhG,QAAQmG,EACR3D,OAAO2D,EACPT,OAAOU,EACPT,MAAMU,EACN3F,QAAQ,GAEZ,OAAOjB,EAAMsG,OAAOS,GAGnB,GAAY,WAATR,EAAkB,CAGtB,GAFAvD,QAAQC,IAAI,8BAEA,KADZF,EAASmC,EAAYuB,IAEjBzD,QAAQC,IAAI,oBACZyD,EAAUrB,EAAcoB,EAAWE,GACnC3G,EAAM6G,QAAU,OACd,IAAY,IAAT9D,EAEL,OADA/C,EAAM6G,QAAU,EACT7G,GAEX2G,GAA8B,GACZH,EAAIrG,OAAO,EAAEyG,IAC3BD,EAAkB,EAClBC,GAAgC,GAEpC,IAAMG,EAAa,CACfzG,KAAKiG,EACLhG,QAAQmG,EACR3D,OAAO2D,EACPT,OAAOU,EACPT,MAAMU,EACN3F,QAAQ,GAEZ,OAAOjB,EAAMsG,OAAOS,GAGnB,GAAY,cAATR,EAAqB,CAGzB,IAAY,KADZxD,EAASmC,EAAYuB,IAEjBC,EAAUf,EAAcc,EAAWE,GACnC3G,EAAM6G,QAAU,OACd,IAAY,IAAT9D,EAEL,OADA/C,EAAM6G,QAAU,EACT7G,GAEX2G,GAA8B,GACZH,EAAIrG,OAAO,EAAEyG,IAC3BD,EAAkB,EAClBC,GAAgC,GAEpC,IAAMG,EAAa,CACfzG,KAAKiG,EACLhG,QAAQmG,EACR3D,OAAO2D,EACPT,OAAOU,EACPT,MAAMU,EACN3F,QAAQ,GAEZ,OAAOjB,EAAMsG,OAAOS,GAExB,OAGJ,QACI,OAAO/G,IC7HfgH,WNNsB,WAA8B,IAA7BhH,EAA4B,uDAAtB4E,EAAawB,EAAS,uCAE5C5F,EAAgB4F,EAAhB5F,KAAKC,EAAW2F,EAAX3F,QAEZ,OAAQD,GACJ,IONoB,ePMD,IACRqE,EAAgBpE,EAAhBoE,KAAKtE,EAAWE,EAAXF,QAEN0G,EAAU,CACZpC,OACAtE,WAIJ,OAFAyC,QAAQC,IAAI,aACZD,QAAQC,IAAIgE,GACLjH,EAAMsG,OAAOW,GAGxB,QACI,OAAOjH,KMRbkH,EAAcC,YAAgBhB,GELpCiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MFKsBC,YAAYN,IEJ1C,kBAAC,EAAD,QAGJO,SAASC,eAAe,STqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlF,QAAQkF,MAAMA,EAAMC,c","file":"static/js/main.8ecbb93c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useEffect,useState} from 'react';\nimport {createArray,chartChange} from '../chart/actions'\nimport { connect } from 'react-redux';\nimport './AlgorithmPanel.css'\n\nconst AlgorithmPanel = ({onArrayCreated,onButtonClicked}) => {\n    \n    let newArray = []\n    \n    const [algo,setAlgo]= useState('bubble');\n    const [arraynum,setArrayNum]=useState(120)  //source of origin\n    const [onGoing,setOnGoing]=useState(0)\n    \n    useEffect(()=>{\n        for(let i=0;i<arraynum;i++){\n            let newElement = Math.floor(Math.random()*100)\n            newArray.push(newElement)\n        }\n\n        if(newArray.length>0){\n            onArrayCreated(algo,newArray)  //deliver the state to chartChange state in the store\n        }\n        \n    },[arraynum,algo])\n\n    const handleSelect = (e) =>{\n        setAlgo(e.target.value)\n    }\n\n    const sliding = (e)=>{\n        setOnGoing(0)\n        setArrayNum(parseInt(e.target.value))\n    }\n\n    const handleSubmit =(e)=>{\n        e.preventDefault()\n        setOnGoing(1)\n        onButtonClicked()\n    }\n\n    const resetButton =(e)=>{\n        e.preventDefault()\n        window.location.reload()\n    }\n\n    return(\n        <div className='controlpanel'>\n            <form onSubmit={handleSubmit}>\n                <label>Select a sorting method: </label>\n                <select disabled={onGoing===1} onChange={handleSelect}>\n                    <option value='bubble'>Bubble Sort</option>\n                    <option value='insertion'>Insertion Sort</option>\n                    <option value='select'>Selection Sort</option>\n                </select>\n            \n                <label>Number of Arrays: {arraynum}</label>\n                <input type='range'className='slider'min=\"1\" max=\"240\"value={arraynum}onChange={sliding}></input>\n                <input disabled={onGoing===1}type='submit'className='runbutton'value='Run'onClick={handleSubmit}></input>\n                {/* <input disabled={onGoing===0}type='submit'className='resetbutton'value='Reset'onClick={resetButton}></input> */}\n                    \n            </form>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    chartState:state.chartChange[state.chartChange.length - 1]\n});\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onArrayCreated:(algo,anArray)=>dispatch(createArray(algo,anArray)),\n        onButtonClicked:()=>dispatch(chartChange())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlgorithmPanel)","//these actions will be implemented as side effect for chart change\n\nexport const CREATE_ARRAY = 'CREATE_ARRAY'\nexport const createArray = (algo,anArray)=>({\n    type:CREATE_ARRAY,\n    payload:{algo,anArray}\n})\n\nexport const CHART_CHANGE = 'CHART_CHANGE'\nexport const chartChange = ()=>({\n    type:CHART_CHANGE,\n})\n","import React,{useEffect,useState} from 'react';\nimport { connect } from 'react-redux';\nimport {chartChange} from './actions'\nimport \"./Barchart.css\"\nimport * as d3 from 'd3'\n\nconst Barchart = ({chartData,onChartChangeAuto}) => {\n    let newArray = []\n    // let len = chartData.length\n    let upperLimit = chartData.anArray.length\n\n    const [Yarray,setYArray]=useState(chartData.anArray) //so the initial state here should be an empty array\n\n    useEffect(()=>{\n        let delay = 80;\n\n        if(chartData.algo==='bubble'){\n            delay = 10\n        }\n\n        const testing = setTimeout(()=>{\n        if(chartData.sorted.length===0){\n            newArray = chartData.anArray\n            setYArray(newArray)\n        }\n        else if(chartData.anArray===chartData.sorted){\n            //insert the recursion data here\n            console.log('Sorting Started \\(^V^)/')\n            // console.log(chartData)\n            newArray = chartData.anArray\n            setYArray(newArray)\n            onChartChangeAuto()\n        }\n        \n\n        if(newArray.length!==0){\n            const width = 4.5*newArray.length //width of the actual chart, different than the svg element\n            const height = 70 //height of the actual chart, different than the svg element\n            const svg = d3.select('.svg-canvas')\n            svg.selectAll(\"*\").remove()\n\n            var x = d3.scaleLinear().domain([0,upperLimit]).range([0,width])\n            // var y = d3.scaleLinear().domain([0,d3.max(Yarray)]).range([height,0])\n\n            var xAxis = d3.axisBottom(x).ticks(8)\n            // var yAxis = d3.axisLeft(y).ticks(5)\n\n            //locate the chart in the middle of the svg frame: 800/2 - width/2\n            var chartGroup = svg.append('g').attr('transform','translate('+(550 - width/2)+',300)')\n            chartGroup.selectAll(\"rect\").data(Yarray).enter().append(\"rect\")\n                    .attr(\"height\",(d,i)=>d*3)\n                    .attr(\"width\",\"3.5\")\n                    .attr(\"fill\",\"blue\")\n                    .attr('x',(d,i)=>4.5*i)\n                    .attr('y',(d,i)=>height-d*3)\n                    \n            chartGroup.append('g').attr('class','axis x')\n                    .attr('transform','translate(0,'+height+')')\n                    .call(xAxis)\n        }\n        },delay);\n        return ()=>clearTimeout(testing)\n    },[chartData,Yarray]) //Yarray\n\n    return(\n        <div id='chart-container'>\n            <h3>Bar Chart</h3>\n            <svg className=\"svg-canvas\" width=\"1100px\" height=\"400px\"></svg>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    chartData:state.chartChange[state.chartChange.length - 1]\n});\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onChartChangeAuto:()=>dispatch(chartChange())\n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Barchart)\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AlgorithmPanel from './components/algorithm/AlgorithmPanel'\nimport Barchart from './components/chart/Barchart'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Sorting Visualizer</h1>\n      <AlgorithmPanel />\n      <Barchart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CREATE_A_RUN} from './actions'\n\nconst initialState = [{text:'bubble',anArray:[0,0,0,0,0,0]}]\nexport const createARun = (state=initialState,action)=>{\n\n    const {type,payload} = action;\n\n    switch (type){\n        case CREATE_A_RUN:{\n            const {text,anArray} = payload;\n            \n            const aNewRun = {\n                text,\n                anArray\n            }\n            console.log('Success! ')\n            console.log(aNewRun)\n            return state.concat(aNewRun)\n        }\n\n        default:\n            return state\n\n    }\n    \n}","//sole purpose is sorting arrays here\nexport function bubblesort(item,cursorPointer){\n    console.log('Cursor pointer is '+ cursorPointer)\n\n        let temp = item[cursorPointer]\n        if(item[cursorPointer]>item[cursorPointer+1]){\n            item[cursorPointer]=item[cursorPointer+1]\n            item[cursorPointer+1]=temp\n        }\n        \n    return item\n}","export function sortedCheck(item){\n    let len = item.length\n    for(let j=0;j<len;j++){\n        if(item[j]>item[j+1]){\n            // console.log('checked, NOT SORTED')\n            // console.log(j)\n            return false\n        }\n    }\n    return true\n}\n","export function selectionsort(item,cursorPointer){\n    console.log('Cursor pointer is '+ cursorPointer)\n    //loop through the whole array and find the element with the lowest value\n    let lowest = 100;\n    let lowest_index = 0;\n    let truncated = item.slice(cursorPointer)\n    let sorted = item.slice(0,cursorPointer);\n\n    for(let i=0;i<truncated.length;i++){\n        if(truncated[i]<=lowest){\n            lowest = truncated[i]\n            lowest_index = i\n        }\n    }\n\n    sorted.push(lowest)\n    truncated.splice(lowest_index,1)\n    sorted.push(...truncated)\n    item = sorted\n    \n    return item\n}","export function insertionsort(item,cursorPointer){\n    console.log(\"Inside the insertion sort function.\")\n\n    let sorted = item.slice(0,cursorPointer)\n    let truncated = item.slice(cursorPointer)\n\n    // console.log(sorted)\n    // console.log(truncated)\n\n    if(sorted.length===0){\n        sorted.push(truncated[0])\n        truncated.splice(0,1)\n        // console.log(sorted)\n        // console.log(truncated)\n\n    }else{\n        let splitted = truncated[0]\n        for(let i=0;i<sorted.length;i++){\n            if(splitted>=sorted[i]&&splitted<sorted[i+1]){\n                let border = i + 1\n                // console.log('insert the number here '+border)\n                let buffer = sorted.slice(border)\n                // console.log('sliced sorted array from the insertion point: ')\n                // console.log(buffer)\n\n                sorted.splice(border)\n                // console.log('made space for insertion: ')\n                // console.log(sorted)\n\n                sorted[i+1]=splitted\n                // console.log('sorted array after the insertion: ')\n                // console.log(sorted)\n                sorted.push(...buffer)\n                break\n                \n            }else if(splitted<sorted[0]){\n                sorted.unshift(splitted)\n                break\n            }else if(splitted>=sorted[i]&&sorted[i+1]===undefined){\n                sorted.push(splitted)\n                break\n            }\n        }\n        truncated.splice(0,1)\n        // console.log(sorted)\n        // console.log(truncated)\n    }\n    \n    sorted.push(...truncated)\n    item = sorted\n    // console.log(item)\n    return item\n}","import {CREATE_ARRAY,CHART_CHANGE} from './actions'\nimport { bubblesort } from '../algorithm/sortingcode/bubblesort';\nimport { sortedCheck } from '../algorithm/sortingcode/sortedcheck';\nimport { selectionsort } from '../algorithm/sortingcode/selectionsort';\nimport { insertionsort } from '../algorithm/sortingcode/insertionsort';\n\n\nconst initialState = [{algo:'',anArray:[],sorted:[],cursor:0,round:0,onGoing:0}]\n\nexport const chartChange = (state=initialState,action) => {\n    const {type,payload} = action;\n    switch(type){\n        case CREATE_ARRAY:{\n           const {algo,anArray} = payload;\n\n           const chartMovement = {\n                algo,\n                anArray:anArray,\n                sorted:[],\n                cursor:state[0].cursor,\n                round:state[0].round,\n                onGoing:state[0].onGoing\n           }\n\n           console.log('Slider Movement Tracked')\n\n           //concat, but make sure the last one is rendered\n\n           return state.concat(chartMovement)\n        }\n\n        case CHART_CHANGE: {\n            \n            //the inputs for new states are from CHANGES made on exsiting state\n            let len = state.length\n            let onGoing = state.onGoing  //0,1  0--Start/Sorted  1--Being Sorted\n            let method = state[len-1].algo\n            let ref = state[len-1].anArray\n            let tobesorted = state[len-1].anArray.slice()\n            let swapped = []\n            let sorted = false\n\n            //featured parameters for this algorithm\n            let cursor_pointer = state[len-1].cursor,round_counter =state[len-1].round\n\n            if(method==='bubble'){\n                if(tobesorted.length===0){\n                    swapped = bubblesort(tobesorted,cursor_pointer)\n                }else if(tobesorted.length!==0){\n                    sorted = sortedCheck(tobesorted)\n                    // console.log(sorted)\n                    if(sorted===false){\n                        swapped = bubblesort(tobesorted,cursor_pointer)\n                        state.OnGoing = 1\n                    }else if(sorted===true){\n                        state.Ongoing = 0\n                        return state\n                    }   \n                }\n                cursor_pointer=cursor_pointer+1\n                //ref.length-1-round, round would be an variable with 0 as its initial value\n                if(cursor_pointer>ref.length-1-round_counter){\n                    cursor_pointer =  0\n                    round_counter = round_counter + 1\n                }\n\n                //swapping these keys\n                const sortUpdate = {\n                    algo:method,\n                    anArray:swapped,\n                    sorted:swapped,\n                    cursor:cursor_pointer,\n                    round:round_counter,\n                    onGoing:1\n                }\n                return state.concat(sortUpdate)\n                \n            }\n            else if(method==='select'){\n                console.log('Selection Method selected')\n                sorted = sortedCheck(tobesorted)\n                if(sorted===false){\n                    console.log(\"It is not sorted\")\n                    swapped = selectionsort(tobesorted,cursor_pointer)\n                    state.OnGoing = 1;\n                }else if(sorted===true){\n                    state.OnGoing = 0;\n                    return state\n                }\n                cursor_pointer=cursor_pointer+1\n                if(cursor_pointer>ref.length-1-round_counter){\n                    cursor_pointer =  0\n                    round_counter = round_counter + 1\n                }\n                const sortUpdate = {\n                    algo:method,\n                    anArray:swapped,\n                    sorted:swapped,\n                    cursor:cursor_pointer,\n                    round:round_counter,\n                    onGoing:1,\n                }\n                return state.concat(sortUpdate)\n            }\n\n            else if(method==='insertion'){\n                // console.log('Insertion sort selected.')\n                sorted = sortedCheck(tobesorted)\n                if(sorted===false){\n                    swapped = insertionsort(tobesorted,cursor_pointer)\n                    state.OnGoing = 1;\n                }else if(sorted===true){\n                    state.OnGoing = 0;\n                    return state\n                }\n                cursor_pointer=cursor_pointer+1\n                if(cursor_pointer>ref.length-1-round_counter){\n                    cursor_pointer =  0\n                    round_counter = round_counter + 1\n                }\n                const sortUpdate = {\n                    algo:method,\n                    anArray:swapped,\n                    sorted:swapped,\n                    cursor:cursor_pointer,\n                    round:round_counter,\n                    onGoing:1\n                }\n                return state.concat(sortUpdate)\n            }\n            return\n        }\n        \n        default:\n            return state\n    }\n    \n    \n}","//here we COMBINE all of the reducers we created for different purposes\nimport { createStore,combineReducers } from 'redux';\n// import {slidebar} from './components/slidebar/reducers'\nimport {createARun} from './components/algorithm/reducers'\nimport {chartChange} from './components/chart/reducers'\n\nconst reducers = {\n\n    chartChange,\n    createARun\n    \n}\n\nconst rootReducer = combineReducers(reducers)\n\nexport const configureStore = () => createStore(rootReducer)","//choose a algorithm here from the following:  selection sort, insertion sort & bubble sort\n\nexport const CREATE_A_RUN = 'CREATE_A_RUN'\nexport const createARun = (text,anArray)=>({\n    type:CREATE_A_RUN,\n    payload:{text,anArray}\n})\n\n/*\n    text: algorithm type\n    low:  lower boundary of the array\n    high: higher boundary of the array\n    arraynum: number of element in the array\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport {configureStore} from './store.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}